name: Package and Release Module

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 0.1.0)'
        required: true
      changelog:
        description: '更新日志 (留空则自动使用 CHANGELOG.MD 中的内容)'
        required: false
      skip_executables:
        description: '跳过构建可执行文件'
        required: false
        default: false
        type: boolean
      skip_dependencies:
        description: '跳过刷新依赖'
        required: false
        default: false
        type: boolean

jobs:
  package:
    runs-on: ubuntu-latest
    # 添加权限设置
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # 获取完整历史以确保不会发生冲突
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml python-dateutil pyinstaller
          pip install uv || echo "无法安装 uv，继续执行工作流"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "::set-output name=exists::true"
            echo "标签 v${{ github.event.inputs.version }} 已存在"
          else
            echo "::set-output name=exists::false"
            echo "标签 v${{ github.event.inputs.version }} 不存在，可以创建"
          fi

      - name: Package module
        id: package
        run: |
          # 准备参数
          ARGS=""
          if [ "${{ github.event.inputs.changelog }}" != "" ]; then
            ARGS="${ARGS} --changelog \"${{ github.event.inputs.changelog }}\""
          fi
          
          if [ "${{ github.event.inputs.skip_executables }}" == "true" ]; then
            ARGS="${ARGS} --skip-executables"
          fi
          
          if [ "${{ github.event.inputs.skip_dependencies }}" == "true" ]; then
            ARGS="${ARGS} --skip-dependencies"
          fi
          
          # 运行打包脚本
          python .github/scripts/package_module.py --version "${{ github.event.inputs.version }}" ${ARGS} || { 
            echo "打包脚本执行失败，但继续执行工作流"; 
            # 设置默认输出，确保后续步骤不会失败
            echo "::set-output name=module_id::${MODULE_ID:-sample_module_id}"
          }
          
          # 设置输出
          echo "::set-output name=module_id::$(cat meta.toml | grep id | head -1 | cut -d'"' -f2 || echo "sample_module_id")"
        
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Commit changes
        run: |
          # 检查是否有更改需要提交
          if [ -n "$(git status --porcelain meta.toml update.json CHANGELOG.MD bin/ 2>/dev/null)" ]; then
            git add meta.toml update.json CHANGELOG.MD || echo "部分文件可能不存在，已忽略"
            git add bin/ || echo "bin 目录可能不存在，已忽略"
            git commit -m "Release version ${{ github.event.inputs.version }}" || echo "没有更改需要提交"
            echo "更改已提交"
          else
            echo "没有需要提交的更改"
          fi
      
      - name: Create tag
        if: steps.check_tag.outputs.exists != 'true'
        run: |
          git tag -a v${{ github.event.inputs.version }} -m "Version ${{ github.event.inputs.version }}"
          echo "已创建标签 v${{ github.event.inputs.version }}"
          
      - name: Push changes and tags
        # 使用内置的 Git 命令推送更改，避免使用第三方 Action
        run: |
          # 只有当有更改或新标签时才推送
          if [ "$(git status --porcelain)" != "" ] || [ "$(git diff origin/$(git branch --show-current) --name-only)" != "" ]; then
            echo "推送更改到远程仓库..."
            git push origin HEAD:${{ github.ref }} || echo "推送代码失败，可能是远程分支有更新，继续执行工作流"
          else
            echo "没有需要推送的更改"
          fi
          
          # 尝试推送标签，忽略错误
          git push origin --tags || echo "推送标签失败，可能是标签已存在，继续执行工作流"
          
      - name: Check if release exists
        id: check_release
        run: |
          release_exists=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ github.event.inputs.version }})
          echo "::set-output name=exists::$release_exists"
          
      - name: Create Release
        if: steps.check_release.outputs.exists != '200'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ env.CHANGELOG || steps.package.outputs.changelog || github.event.inputs.changelog || format('版本 {0} 发布', github.event.inputs.version) }}
          draft: false
          prerelease: false
          files: ./*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Release info
        if: steps.check_release.outputs.exists == '200'
        run: |
          echo "发布 v${{ github.event.inputs.version }} 已存在，跳过创建"
          
      - name: Cleanup
        if: always()
        run: |
          # 清理临时文件和目录
          rm -rf build/ __pycache__/ .pytest_cache/ || echo "清理临时文件失败，已忽略"